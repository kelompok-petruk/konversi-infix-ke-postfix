// KELOMPOK        <<"""""DEAR""""">>

//                 1. Desta Feranita      1517051002
//                 2. Nia Nur Atika       1817051015
//                 3. Eka Intan Sari      1817051022
//                 4. Rena Okriyani       1817051029

#include<iostream>
#include<stdio.h>
#include<stdlib.h> // untuk keluar ()
#include<ctype.h>  //untuk isdigit (char)
#include<string.h>
#define SIZE 100 
// ditanyakan disini sebagai variabel gkobal karena tumpuka [] di gunakan lebih dari satu fungsi
using namespace std;

char stack [SIZE];
int top = -1;
//tentukan operasi push
void push(char item) {
        if (top >= SIZE -1){
            cout<<"\nStack Overflow.";
        }
        else{
            top =top+1;
            stack[top] =item;
    }
}
//tentukan operasi pop
char pop(){
        char item {
        if (top <0){
                cout<<"stack under flow: ekspresi infiks tidak valid";
                getchar ();
                //under flow dapat terjadi untuk ekspresi tidak valid dimana (dan) tidak cocok
                exit(1);
        }
        else{
            item =stack(top);
            top = top-1;
            return(item);
        }
}
//define fungsi yang digunakan untuk menentukan apakah simbol adalah operator atau tidak (Yaitu simbol operan)
//Fungsi ini mengembalikan 1 jika simbol adalah operator yang lain mengembalikan 0

int is_operator (char symbol){
    if(symbol == '^' || symbol == '^' || symbol == '/' || symbol == '+' || symbol == '-'){
          return 1;
     }
     else{
     return 0;
   }
 }
// mendefinisikan fungsi yang digunakan untuk menetapkan prioritas kepada operator.
// Di sini ' menunjukkan operator eksponen.
// Dalam fungsi ini kita mengasumsikan nilai integer yang lebih tinggi Berarti prioritas lebih tinggi

int precedence(char symbol){
    if(symbol == '^'){ // operator eksponen, diutamkan tertinggi
            return(3);
    }
    else if(symbol == '^' || symbol == '/'){
            return(2);
    }
    else if(symbol == '+' || symbol == '-'){ // diutamakan terendah
            return(1);
    }
    else{
            return(0);
    }
}

void InfixToPostfix(char infix_exp[], char postfix_exp[]){

int i, j;
char item;
char x;

push ('(');                             // dorong '(' ke tumpukan
strcat (infix_exp[1];                  // tambahkan ')' ke infix ekspresi

i=0;
j=0;
item = infix_exp[1];                    // menginisialisasi sebelum loop

while(item != '\0')(                   // jalankan loop sampai akhir ekspresi infix
        if (item == '(')(
                push (item);
               )
               else if (isdigit (item) || isalpha (item)){
                        postfix_exp[j] = item;                  //tambahkan simbol operan ke expr postfix
                        j++;
               }
               else if (is_operator(item) == 1 )(       // berarti simbol adalah operator
                        x = pop ();
                        while (is_operator(x) == 1 && precedence (x) >= precedence (item)){
                                postfix_exp[j] = x ;
                                j++;
                                x = pop();
                        }
                        push (x);
                        
                        push (item);            // dorong simbol operator saat ini ke tumpukan
                 }
                 else if (item == ')'){         // jika simbol sat ini adalah ')' maka pop dan terus muncul sampai '(' bertemu
                 x = pop() ;
                 
                        
                        
               
